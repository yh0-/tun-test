#!/bin/sh
# @author yh0- <yysjryysjr@gmail.com>
# @license GPLv3+
# Script for launching airtun-ng to join OPEN/WEP access point
AUTH_TIMEOUT=10
VERBOSE=false
SETUP_IP=false
PROG="$(basename "$0" .sh)"
BASE_DIR="$(cd $(dirname "$0") && pwd)"
CONFIG_FILE="$BASE_DIR/$PROG.conf"

if [ "$(id -u)" != "0" ] ; then
	printf "This needs to be run as root (or with sudo).\n"
	exit 1
fi

PROGS=""
for i in aireplay-ng airtun-ng airmon-ng ip hexdump ; do
	if [ ! "$(command -v $i 2>&1)" ] ; then
		PROGS="$PROGS $i"
	fi
done

if [ -n "$PROGS" ] ; then
	for i in $PROGS; do printf "$i not found\n" ; done
	exit 1
fi

OUTPUT="$(airmon-ng)"
if printf "\n$OUTPUT" | grep -q "install\|ethtool" ; then
	printf "Output from airmon-ng:\n"
	printf "\n$OUTPUT"
	exit 1
fi

if airmon-ng --verbose | grep -q usage ; then
	printf "Please upgrade your airmon-ng.\n"
	exit 1
fi

if [ ! -c /dev/net/tun ] ; then
	modprobe tun
	sleep 1
fi

if [ ! -c /dev/net/tun ] ; then
	printf "TUN/TAP support is not found in this kernel.\n"
	exit 1
fi

if [ ! -f "$CONFIG_FILE" ] ; then
	cat << EOF >> "$CONFIG_FILE"
# $PROG configuration file
IP=192.168.1.3
NETMASK=24
ROUTER=192.168.1.1
DNS=192.168.1.1
DOMAIN=
BROADCAST=
EOF
fi

usage ()
{
	printf "\nScript for launching airtun-ng to join OPEN/WEP access point\n\n"
	printf "Required Arguments:\n"
	printf "  -i <card>	 Wireless card\n"
	printf "  -b <bssid>	BSSID of the access point (AP MAC address)\n"
	printf "  -c <channel>  Set the 802.11 channel for the card\n\n"
	printf "Optional Arguments:\n"
	printf "  -e <ssid>	 Set AP SSID (AP Network Name)\n"
	printf "  -m <mac>	  Set card MAC address\n"
	printf "  -w <WEP key>  Use this WEP key to encrypt packets\n"
	printf "  -s			Set IP of the created TAP device atX (and \n"
	printf "				netmask, gateway) afterwards with the\n"
	printf "				content of config file: $(basename $0).conf.\n"
	printf "  -v			Verbose mode\n"
	printf "  -h, --help	Display this help and exit\n\n"
	printf "Example:\n"
	printf "  $(basename $0) -i wlan0mon -b 00:19:BE:80:1E:46 -c 6 -w abcde\n\n"
	exit
}

get_wepkey ()
{
	if [ -z "$1" ] || [ "x$1" = "x-" ] ; then
		return
	fi
	local k="$1"
	local tmp

	# Match 64/128/152/256-bit WEP key, e.g. 0011223344 etc
	if printf "$k" | \
		grep -q "^\([0-9a-fA-F]\{2\}\)\{5\}$\|^\([0-9a-fA-F]\{2\}\)\{13\}$\|^\([0-9a-fA-F]\{2\}\)\{16\}$\|^\([0-9a-fA-F]\{2\}\)\{29\}$" ; then

		KEY_HEX="$(printf "$k" | sed 's/../&:/g')"; KEY_HEX="${KEY_HEX%":"}"
		KEY_STR=""; for x in $(printf "$k" | sed 's/../& /g'); do KEY_STR="${KEY_STR}\\x${x}"; done

	# Match 64/128/152/256-bit WEP key, e.g. 00:11:22:33:44 etc
	elif printf "$k" | \
		grep -q "^\([0-9a-fA-F]\{2\}[:]\)\{4\}[0-9a-fA-F]\{2\}$\|^\([0-9a-fA-F]\{2\}[:]\)\{12\}[0-9a-fA-F]\{2\}$\|^\([0-9a-fA-F]\{2\}[:]\)\{15\}[0-9a-fA-F]\{2\}$\|^\([0-9a-fA-F]{2}[:]\)\{28\}[0-9a-fA-F]\{2\}$" ; then

		KEY_HEX="$k"
		KEY_STR=""; for x in $(printf "$k"| sed 's/://g; s/../& /g'); do KEY_STR="${KEY_STR}\\x${x}"; done

	# Assume it's ASCII?
	else
		case ${#k} in
		5|13|16|29);;
		*)
			printf "ERROR: The specified plaintext or ASCII WEP key has ${#k} characters.\n"
			printf "It must have 5/13/16/29 characters to be valid.\n"
			return 1
			;;
		esac
		KEY_HEX="$(printf "$k" | hexdump -v -e '/1 "%02x "' | sed 's/\(.*\) /\1/' | sed 's/ /:/g')"
		KEY_STR="$k"
	fi
	#printf "KEY_HEX=$KEY_HEX\nKEY_STR=$KEY_STR\n"
}

cleanup ()
{
	printf "Exiting...\n\n"
	if ps -p ${WGET_PID} > /dev/null 2>&1 ; then
		kill ${WGET_PID}
	fi

	if ip link show dev ${TUNDEV} > /dev/null 2>&1 ; then
		ip addr flush dev ${TUNDEV}
		if $SETUP_IP ; then
			if [ -n "$DNS" ] ; then
				[ -f /etc/resolv.conf.bak ] && mv /etc/resolv.conf.bak /etc/resolv.conf
			fi
		fi
	fi

	if [ -f "/var/run/airtun-ng-${DEV}.pid" ] ; then
		pid=$(cat "/var/run/airtun-ng-${DEV}.pid")
		kill -9 ${pid} 2> /dev/null > /dev/null &
		rm "/var/run/airtun-ng-${DEV}.pid"
	fi
	sleep 2
	airmon-ng stop ${DEV}
	exit 1
}

USER_AGENT="Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543 Safari/419.3"
URL_DL="http://speedtest.wdc01.softlayer.com/downloads/test500.zip" #XXX
dl_speed_test()
{
	local iface="$1"
	local ip_addr

	if [ -z "$iface" ] ; then
		! ip route | grep -qs default && return 1
		iface=$(ip route | grep "^default" | sed -nr 's/.*dev (\S+).*/\1/p')
	fi
	ip_addr=$(ip addr show dev ${iface} | awk -F"[/ ]+" '/inet / {print $3}')

	printf "\nTest download speed...\n"
	printf "wget -4 --bind-address=${ip_addr} --no-proxy -c -t 3 -U \"${USER_AGENT}\" -O /dev/null "${URL_DL}"\n"
	wget -4 --bind-address=${ip_addr} --no-proxy -c -t 3 -U "${USER_AGENT}" -O /dev/null "${URL_DL}" &
	WGET_PID=$!
}

setup_ip()
{
	printf "\nSetting fixed IP on "$1"..\n"

	if ! ip link show dev ${1} | grep -q "UP" ; then
		ip link set dev ${1} up
	fi

	echo ip addr add ${IP}/${NETMASK} broadcast ${BROADCAST} dev ${1}
	ip addr add ${IP}/${NETMASK} broadcast ${BROADCAST} dev ${1} || return 1
	if [ -n "$ROUTER" ] ; then
		echo ip route add default via ${ROUTER} dev ${1}
		ip route add default via ${ROUTER} dev ${1} || return 1
	fi

	if [ -n "$DNS" ] ; then
		[ -f /etc/resolv.conf ] && mv /etc/resolv.conf /etc/resolv.conf.bak
		> /etc/resolve.conf
		if [ -n "$DOMAIN" ] ; then
			echo "Adding search $DOMAIN to /etc/resolve.conf"
			echo "search $DOMAIN" >> /etc/resolve.conf
			echo "Adding domain $DOMAIN to /etc/resolve.conf"
			echo "domain $DOMAIN" >> /etc/resolve.conf
		fi
		for n in $DNS ; do
			echo "Adding dns $n to /etc/resolve.conf"
			echo "nameserver $n" >> /etc/resolve.conf
		done
	fi
}

opt=""
while [ $# -gt 0 ]; do
	case "$1" in
	-h|--help)
		usage ;;
	-i | -b | -c | -e | -m | -w )
		opt="$1"
		shift
		if test $# = 0 ; then
			printf "Missing argument for '$opt'\n"
			exit 1
		fi
		case "$opt" in
		-e | -c ) ;;
		* )
			case "$1" in
			-* )
				printf "Missing argument for '$opt'\n"
				exit 1 ;;
			esac ;;
		esac

		case "$opt" in
		-i ) DEV="$1" ;;
		-b ) BSSID="$1" ;;
		-c ) CH="$1" ;;
		-e ) ESSID="$1" ;;
		-m ) MAC="$1" ;;
		-w ) WEP_KEY="$1" ;;
		esac

		case "$opt" in
		-i | -b | -c | -w ) ;;
		-e )
			if echo "$ESSID" | grep -q "[[:space:]]" ; then
				ESSID="\"$ESSID\""
			fi ;;
		* ) ;;
		esac
		shift ;;
	-v )
		shift
		VERBOSE=true ;;
	-s )
		shift
		SETUP_IP=true ;;
	-- ) # Stop option processing
		shift
		break ;;
	-* )
		printf "Unknown option '$1'\n"
		exit 1 ;;
	* )
		shift ;;
	esac
done

if [ -z "$DEV" ] || [ -z "$BSSID" ] || [ -z "$CH" ] ; then
	printf "$PROG: missing required arguments\n"
	printf "Try \`$PROG --help' for more information.\n"
	exit 1
fi

if ! ip link show dev ${DEV} > /dev/null 2>&1; then
	printf "ERROR: The specified device '${DEV}' does not exist. Please review.\n"
	exit 1
fi

if [ ${#BSSID} = 17 ] && [ "$(echo "$BSSID" | sed 's/[^0-9A-Fa-f:]//g')" = "$BSSID" ]; then
	true
else
	printf "ERROR: Expected MAC address in the form of XX:XX:XX:XX:XX:XX. Got '${BSSID}'. Please review.\n"
	exit 1
fi

invalid=false
if [ "$(echo "$CH" | sed 's/[^0-9-]//g')" = "$CH" ] ; then
	if [ "${CH}" -lt 1000 ] 2> /dev/null ; then
		CH=$((0xFF & $CH))
	else
		invalid=true
		if [ "${CH}" -gt 1000 ] 2> /dev/null ; then
			invalid=false
		fi
	fi
else
	invalid=true
fi

if $invalid ; then
	printf "ERROR: Expected a number. Got '${CH}'. Please review.\n"
	exit 1
fi

if [ -n "$WEP_KEY" ] ; then
	KEY_HEX=""
	get_wepkey "$WEP_KEY" || exit 1
	WEP_KEY="$KEY_HEX"
fi

if $SETUP_IP ; then
	if [ -f "$CONFIG_FILE" ] && [ -r "$CONFIG_FILE" ] ; then
		true
	else
		printf "ERROR: Cannot read contents of $CONFIG_FILE\n"
		exit 1
	fi
	IP="$(grep "^IP=" "$CONFIG_FILE" | sed 's/^IP=//g')"
	NETMASK="$(grep "^NETMASK=" "$CONFIG_FILE" | sed 's/^NETMASK=//g')"
	ROUTER="$(grep "^ROUTER=" "$CONFIG_FILE" | sed 's/^ROUTER=//g')"
	DNS="$(grep "^DNS=" "$CONFIG_FILE" | sed 's/^DNS=//g')"
	DOMAIN="$(grep "^DOMAIN=" "$CONFIG_FILE" | sed 's/^DOMAIN=//g')"
	BROADCAST="$(grep "^BROADCAST=" "$CONFIG_FILE" | sed 's/^BROADCAST=//g')"
	[ -z "$IP" ] && IP=192.168.1.13
	[ -z "$NETMASK" ] && NETMASK=24
	[ -n "$BROADCAST" ] || BROADCAST="+"
fi

if [ -f "/var/run/airtun-ng-${DEV}.pid" ]; then
	pid=$(cat "/var/run/airtun-ng-${DEV}.pid")
	if ps -p ${pid} > /dev/null 2>&1 ; then
		printf "Lock file exists!\n"
		printf "Process with PID $(cat "/var/run/airtun-ng-${DEV}.pid") (airtun-ng) is running on interface ${DEV}\n"
		exit 1
	fi
fi

$VERBOSE && printf "\nRunning airmon-ng start ${DEV} ${CH}...\n"
PHYDEV=$(airmon-ng start ${DEV} ${CH} | grep monitor | awk -F ' on ' '{print $2}' | sed 's/)//g')
if [ -z "$PHYDEV" ] ; then
	printf "\nFailed to setup device '$DEV'. Please review.\n"
	exit 1
fi

DEV="$(echo "$PHYDEV" | awk -F']' '{print $2}')"
PHY="$(echo "$PHYDEV" | awk -F']' '{print $1}' | sed 's/\[//')"

if [ -n "$MAC" ] && ip link set dev ${DEV} down ; then
	echo ip link set dev ${DEV} addr ${MAC}
	ip link set dev ${DEV} addr ${MAC}
	ip link set dev ${DEV} up
fi

DEVMAC=$(ip link show dev ${DEV} 2>&1 | awk '/link/{print $2}')

if $VERBOSE ; then
	printf "\nConfiguration:\nDEV=$DEV\nDEVMAC=$DEVMAC\nCH=$CH\nBSSID=$BSSID\nWEP_KEY=$WEP_KEY\n"
	if $SETUP_IP ; then
		printf "IP=$IP\nNETMASK=$NETMASK\nBROADCAST=$BROADCAST\nROUTER=$ROUTER\nDNS=$DNS\nDOMAIN=$DOMAIN\n"
	fi
fi
#exit

$VERBOSE && printf "\nRunning airmon-ng check kill..."
airmon-ng check kill

$VERBOSE && printf "Running aireplay-ng..\n"
aireplay_cmd="aireplay-ng -1 0 -a $BSSID -h $DEVMAC -T 1 ${DEV}"
if [ -n "$ESSID" ] ; then
	aireplay_cmd="$aireplay_cmd -e $(echo "$ESSID" | sed 's/^[ \t]*//; s/[ \t]*$//')"
fi
printf "$aireplay_cmd\n"

trap '{ printf "\n\nCtrl+c caught.. "; sleep 1; cleanup; }' INT

start_time=$(date +%s)
while [ $(($(date +%s)-$start_time)) -le $AUTH_TIMEOUT ] ; do
	OUTPUT=$(eval ${aireplay_cmd})
	retval=$?
	[ $retval = 0 ] && break
done
printf "\n$OUTPUT\n\n"
if [ $retval != 0 ] ; then
	printf "Failed to join the network. "
	cleanup
fi

$VERBOSE && printf "\nRunning airtun-ng...\n"
i=0; while [ -d "/sys/class/net/at${i}/" ]; do i=$(($i+1)); done
TUNDEV="at${i}"
airtun_args="-a ${BSSID} -h ${DEVMAC} -t 1 ${DEV}"
[ -n "$WEP_KEY" ] && airtun_args="$airtun_args -w ${WEP_KEY}"
printf "airtun-ng $airtun_args\n"
airtun-ng ${airtun_args} &
echo $! > "/var/run/airtun-ng-${DEV}.pid"
sleep 1s
printf "\nProcess with PID $(cat "/var/run/airtun-ng-${DEV}.pid") (airtun-ng) is running on interface ${DEV}\n"

if [ ! -f "/sys/class/net/${TUNDEV}/tun_flags" ] ; then
	printf "ERROR: Something went wrong. The script $PROG was unable to find the TUN/TAP device.\n\n"
	cleanup
fi

$VERBOSE && printf "\nSetting '${TUNDEV}' MAC address with '${DEV}' MAC address..\n" || printf "\n"
ip link set dev ${TUNDEV} down
sleep 1s
echo ip link set dev ${TUNDEV} addr ${DEVMAC}
ip link set dev ${TUNDEV} addr ${DEVMAC}
ip link set dev ${TUNDEV} up

count=0
while true; do
	OUTPUT=$(eval ${aireplay_cmd})
	if [ $count = 0 ] ; then
		count=1
		printf "\nPress Ctrl+c to exit\n"
		if $SETUP_IP ; then
			setup_ip ${TUNDEV} && ping -c 5 google.com -I ${TUNDEV} && dl_speed_test ${TUNDEV}
		else
			printf "\nYou may want to assign IP manually for the TAP device '${TUNDEV}', e.g:\n"
			printf "ip address add 192.168.1.13/24 brd + dev ${TUNDEV}\n"
			printf "ip route add default via 192.168.1.1 dev ${TUNDEV}\n"
			printf "Or use dhclient, e.g: dhclient at0\n\n"
		fi
	else
		$VERBOSE && printf "${OUTPUT}\n"
	fi
	sleep 1
done
